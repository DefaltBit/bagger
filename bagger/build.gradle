plugins {
  id "de.undercouch.download" version "2.0.0"
}

apply plugin: "application"

mainClassName = "gov.loc.repository.bagger.BaggerApplication"

description = """Spring richclient bagger GUI"""

jar.baseName="bagger"

dependencies {
     compile 'gov.loc:bagit:4.4',
       project(':bagger-common'),
       project(':bagger-core'),
       project(':bagger-business'),
       'org.springframework.richclient:spring-richclient-jdk5:1.0.0',
       'org.springframework.boot:spring-boot-starter-logging:1.3.2.RELEASE',
       'com.vlsolutions:vldocking:2.1.4',
       'com.jgoodies:forms:1.0.7',
       'net.sf.nachocalendar:nachocalendar:0.23',
       'org.codehaus.groovy:groovy-all:2.4.0',
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-resources-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-core-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-jdk6-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-vldocking-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/swingx-0.9.3.jar")
     
    runtime 'com.jgoodies:looks:2.0.4'
}

//include the docs and licenses into the distributable zip
distZip {
  String baseZipDirectory = archiveName - ("." + extension)

  //include the various user guides
  into("${baseZipDirectory}/doc") {
    from "${rootDir.path}/bagger_distribution"
    include "*.doc"
    include "*.txt"
  }
  
  //include the keystore used for signing jars
  into("${baseZipDirectory}/keystore") {
    from "${rootDir.path}/scripts"
    include "bagger.ks"
  }

  into("${baseZipDirectory}/bin") {
    from "${rootDir.path}/scripts"
    include "discoverJavaVersions.py"
  }
}

startScripts {
  if(project.version == "unspecified"){
    applicationDefaultJvmArgs += ["-Xdebug", "-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n"]
  }
  
  unixStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path + '/customUnixStartScript.txt')
  windowsStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path + '/customWindowsStartScript.txt')
}

afterEvaluate {
  configure(tasks.processResources) {
    filter{ String line ->
        if(line.startsWith("Version: unspecified")){
          return "Version: ${project.version}"
        } else if(line.startsWith("applicationDescriptor.title")){
          return "applicationDescriptor.title=Bagger ${project.version}"
        }
        else{
          return line
        }
    }
  }
}

task srcZip(type: Zip) {
  classifier = 'src'
  from rootDir
  include 'bagger-business/**'
  include 'bagger-common/**'
  include 'bagger-core/**'
  include 'bagger-maven/**'
  include 'bagger-package/**'
  include 'bagger_distribution/**'
  include 'README.txt'
  include 'build.gradle'
  include 'eclipse.gradle'
  include 'settings.gradle'
}

tasks.distZip.dependsOn srcZip

////an ugly hack cause this project is basically dead...
//task resolveSpringRichClientDependencies() {
//  description "downloads the gz release of spring rich client and adds the needed dependencies into the build"
//  doLast{
//    File richClientFile = new File("${buildDir}", "downloads/spring-richclient-1.1.0-release.tar.gz")
//    
//    if(!richClientFile.exists()){
//      download {
//          src 'http://sourceforge.net/projects/spring-rich-c/files/spring-rich-c/1.1.0/spring-richclient-1.1.0-release.tar.gz'
//          dest richClientFile
//      }
//    }
//    copy { //un-gzip it
//      from tarTree(richClientFile)
//      into "${buildDir}/downloads"
//    }
//    
//    String baseJarDir = "${buildDir}/downloads/spring-richclient-1.1.0/lib"
//    def jarFiles = files("${baseJarDir}/spring-richclient-resources-1.1.0.jar", 
//      "${baseJarDir}/spring-richclient-core-1.1.0.jar", 
//      "${baseJarDir}/spring-richclient-jdk6-1.1.0.jar",
//      "${baseJarDir}/spring-richclient-vldocking-1.1.0.jar",
//      "${baseJarDir}/swingx-0.9.3.jar")
//    
//    jarFiles.each{
//      println("spring-richclient file: " + it)
//    }
//    
//    project.dependencies.add("compile", jarFiles)
//  }
//}
//
//tasks.compileJava.dependsOn resolveSpringRichClientDependencies