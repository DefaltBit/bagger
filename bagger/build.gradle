import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "application"

mainClassName = "gov.loc.repository.bagger.BaggerApplication"

description = """Spring richclient bagger GUI"""

jar.baseName="bagger"

dependencies {
     compile 'gov.loc:bagit:4.4',
       project(':bagger-common'),
       project(':bagger-core'),
       project(':bagger-business'),
       'org.springframework.richclient:spring-richclient-jdk5:1.0.0',
       'org.springframework.boot:spring-boot-starter-logging:1.3.2.RELEASE',
       'com.vlsolutions:vldocking:2.1.4',
       'com.jgoodies:forms:1.0.7',
       'net.sf.nachocalendar:nachocalendar:0.23',
       'org.codehaus.groovy:groovy-all:2.4.0',
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-resources-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-core-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-jdk6-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/spring-richclient-vldocking-1.1.0.jar"),
       files("${project.projectDir}/spring-richclient-1.1.0-jars/swingx-0.9.3.jar")
     
    runtime 'com.jgoodies:looks:2.0.4'
}

//include the docs and licenses into the distributable zip
distZip {
  String baseZipDirectory = archiveName - ("." + extension)

  //include the various user guides
  into("${baseZipDirectory}/doc") {
    from "${rootDir.path}/bagger_distribution"
    include "*.doc"
    include "*.txt"
  }
  
  //include the keystore used for signing jars
  into("${baseZipDirectory}/keystore") {
    from "${rootDir.path}/scripts"
    include "bagger.ks"
  }

  into("${baseZipDirectory}/bin") {
    from "${rootDir.path}/scripts"
    include "discoverJavaVersions.py"
  }
}

startScripts {
  if(project.version == "unspecified"){
    applicationDefaultJvmArgs += ["-Xdebug", "-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n"]
  }
  
  unixStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path + '/customUnixStartScript.txt')
  windowsStartScriptGenerator.template = resources.text.fromFile(project.projectDir.path + '/customWindowsStartScript.txt')
}

afterEvaluate {
  configure(tasks.processResources) {
    eachFile { copyDetails ->
      if (copyDetails.name == 'about.txt' || copyDetails.name == 'messages.properties') {
          filter(ReplaceTokens, tokens:[VERSION: project.version])
      }
    }
  }
}

task srcZip(type: Zip) {
  classifier = 'src'
  from rootDir
  include 'bagger-business/**'
  include 'bagger-common/**'
  include 'bagger-core/**'
  include 'bagger-maven/**'
  include 'bagger-package/**'
  include 'bagger_distribution/**'
  include 'README.txt'
  include 'build.gradle'
  include 'eclipse.gradle'
  include 'settings.gradle'
}

tasks.distZip.dependsOn srcZip